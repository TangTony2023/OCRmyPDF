name: PDF OCR Processor

on:
  push:
    paths:
      - 'pdf-input/**'  # 监控pdf-input目录下的文件变化
  workflow_dispatch:    # 允许手动触发
    inputs:
      filename:
        description: 'PDF文件名 (如 document.pdf)'
        required: true
      languages:
        description: 'OCR语言代码 (如 eng+chi_sim)'
        required: false
        default: 'eng'

jobs:
  ocr-process:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ocrmypdf/ocrmypdf:latest
      options: --user root  # 需要root权限安装语言包

    steps:
    # ========== 准备阶段 ==========
    - name: Checkout代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 安装语言包
      run: |
        apt-get update
        # 基础语言包（英语已包含）
        apt-get install -y \
          tesseract-ocr-chi-sim \  # 简体中文
          tesseract-ocr-chi-tra \  # 繁体中文
          tesseract-ocr-jpn        # 日语
        # 添加其他需要的语言包...

    # ========== 处理阶段 ==========
    - name: 创建输出目录
      run: mkdir -p pdf-output

    - name: 执行OCR处理
      id: ocr
      run: |
        INPUT_FILE="pdf-input/${{ github.event.inputs.filename || 'document.pdf' }}"
        OUTPUT_FILE="pdf-output/$(basename "${INPUT_FILE%.*}")_OCR.pdf"
        
        ocrmypdf \
          "$INPUT_FILE" \
          "$OUTPUT_FILE" \
          --language "${{ github.event.inputs.languages || 'eng' }}" \
          --output-type pdfa \
          --deskew \          # 自动矫正倾斜
          --clean \           # 清理扫描伪影
          --optimize 3 \      # 最高级别优化
          --progress-bar
        
        # 输出处理结果路径
        echo "output_path=$OUTPUT_FILE" >> $GITHUB_OUTPUT
        echo "input_path=$INPUT_FILE" >> $GITHUB_OUTPUT

    # ========== 结果处理 ==========
    - name: 上传结果文件
      uses: actions/upload-artifact@v3
      with:
        name: ocr-result
        path: ${{ steps.ocr.outputs.output_path }}

    - name: 生成处理报告
      run: |
        echo "📊 OCR处理报告" >> $GITHUB_STEP_SUMMARY
        echo "- 输入文件: [${{ steps.ocr.outputs.input_path }}](https://github.com/${{ github.repository }}/blob/${{ github.sha }}/${{ steps.ocr.outputs.input_path }})" >> $GITHUB_STEP_SUMMARY
        echo "- 输出文件: [${{ steps.ocr.outputs.output_path }}](https://github.com/${{ github.repository }}/blob/${{ github.sha }}/${{ steps.ocr.outputs.output_path }})" >> $GITHUB_STEP_SUMMARY
        echo "- 文件大小变化: $(du -h ${{ steps.ocr.outputs.input_path }} | cut -f1) → $(du -h ${{ steps.ocr.outputs.output_path }} | cut -f1)" >> $GITHUB_STEP_SUMMARY

    # ========== 通知阶段 ========== (可选)
    - name: 发送Slack通知
      if: success()
      uses: slackapi/slack-github-action@v1
      with:
        payload: |
          {
            "text": "✅ PDF处理完成: ${{ github.event.inputs.filename || 'document.pdf' }}",
            "attachments": [{
              "fields": [
                {
                  "title": "下载链接",
                  "value": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                }
              ]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
